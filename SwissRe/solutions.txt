—————————— Exercise 1 ———————————
1-
SELECT title, SUM(copies)
FROM YearRecap
GROUP BY title

2-
SELECT title, SUM(copies) AS copies_sold
FROM YearRecap
GROUP BY title
ORDER BY copies_sold ASC
LIMIT 10

3-
SELECT title, year, SUM(COPIES) AS copies_sold_year
FROM YearRecap AS y
GROUP BY title, year
HAVING copies_sold_year >= 1000
INNER JOIN (
	SELECT title, perc_royalty
	FROM Contract AS c
	WHERE perc_royalty > 0.005)
ON y.title = c.title

4-
SELECT title
FROM book AS b
LEFT JOIN (
	SELECT DISTINCT title
	FROM YearRecap AS y)
ON b. title = y. title
WHERE b. title IS NULL

—————————— Exercise 2 ———————————
1-
SELECT telephone_numbers, SUM(cost)
FROM order
GROUP BY telephone_number

2-
SELECT name, telephone_number
FROM client AS c
JOIN (
	SELECT telephone_number, COUNT( DISTINCT operator_code) AS check
	FROM(
		SELECT DISTINCT telephone_number, operator_code
		FROM order
		)
	GROUP BY telephone_number
	HAVING check  = 1 ) AS B
ON c. telephone_numbers = b.telephone_numbers

3-
SELECT telephone_number
FROM order
WHERE pizza_code = ‘margherita’ and telephone_number IN (
	SELECT telephone_number
	FROM order
	WHERE pizza_code = ‘marinara’)

4-
SELECT telephone_number, name
FROM client
WHERE telephone_number NOT IN (
	SELECT DISTINCT telephone_number
	FROM order
	WHERE MONTH(date)  = January AND YEAR(date) = 2003

—————————— Exercise 3 ———————————
The commerce services will be structured in many microservices. Every microservice (in this case users, warehouse, orders) which will interact with front end requests with APIs.
All  user sessions will be saved in relational databases (Amazon RDS, Azure SQL database) this will provide reliability in transactions and scalability. (At this stage batch historical data analysis will be possible)
With batch processes and data ingestions, data from RDBSs will be integrated with other non structured datas coming from different sources (web scraping, logs, mobile phones, emails..) in a data lake (Amazon S3, Azure data lake).
The stream of data will be managed by Apache Kafka or batch processing.
On top of the data lake many transformations are possible depending of the analysis required. An user friendly data integration platforms (azure Power BI) will permits different analysis.

RDBS architecture

USERS
Id
mail
name,
surname,
Age,
Email,

ADDRESS
Id,
External key,
Address,
City,
Number,
Rank

WAREHOUSE,
id,
Model,
Color,
Size,
Location,
Price

ORDERS,
id,
date,
State,
Buyer_id,
Shopping_bag,


An useful analysis will be for example search for cancelled orders linked to users with the foreign key ‘buyer_id’ and suggest items in emails. Obviously doing analytics in a relational database for financial transaction
and in a such simple architecture will lock DBs and block the service, an hybrid architecture with a data lake will solve the problem as proposed.


—————————— Exercise 4 ———————————

FILES:
ex3.ipynb (to open in a jupyter notebook)
output 1: ex3.txt
Output2: ex3bis.txt

SCRIPTS
Ex3 python script:

import numpy as np

#change the file name for ex3bis
filename = "files/ex3bis.txt"

with open(filename) as f:
    content = f.readlines()
content = np.array([x.strip().split() for x in content])
codes = [list(x) for x in content[:,0]]
max_flips = list(map(int,content[:,1]))

# flip takes as input the code and positions (start and stop) to flip in the code
def flip(scode,start,stop):
    fcode = scode
    if start == stop:
        fcode[start] = abs(scode[start] - 1)
    else:
        for n in range(start,stop+1):
            fcode[n] = abs(scode[n] - 1)   
    return fcode

# positiontoflip takes as input an array and the value(1 or 0) to change and return the start and stop indexes
def positiontoflip(array,face_to_change):
    position_change = []
    array_len = len(array)
    
    for n in range(array_len):
        if array[n] == face_to_change:
            position_change.append(n)
            
    start = min(position_change)
    stop = max(position_change)
    return start, stop

text_file = open("ex3bis.txt", "w")
for i,code in enumerate(codes):
    code = list(map(int,code))
    count = 0
    if code[0] == code[-1]:
        ntochange = abs(code[0] - 1)
    else:
        ntochange = 1
    while (ntochange in code):
        start, stop = positiontoflip(code,ntochange)
        code = flip(code,start,stop)
        count += 1
    if count <= max_flips[i]:
        print(i, count, 'FLIPS')
        text_file.write(str(count)+'\n')
    else:
        print('NOT POSSIBLE, MINIMUM FLIPS',count, 'INSTEAD',max_flips[i])
        text_file.write('NOT POSSIBLE /'+str(count)+' INSTEAD '+str(max_flips[i])+'\n')
    
text_file.close()  

—————————— Exercise 5 ———————————
SOLUTION

#!/usr/bin/python2.7

"""
    SOLUTION DESCRIBED
    The idea is that the program is accessing the same variable without locking it and this may cause issues. The solution implemented consist into adding a lock when accessing that variable to avoid the same job from self.eat.
    
    mutex.acquire()
    mutex.release()
"""

from threading import Thread, Lock
import time
import random
import sys

mutex = Lock()

class Hamster:
    ''' This class simulates the behaviour of an hamster '''
    
    def __init__(self, food):
        self.food_that_theHamster_has = food
        self.status_of_the_hamster = None
        self.a = {1: self.eat,
                        2: self.run,
                        3: self.climb}
        self.stomach = 1

    def born(self):
        ''' Give life to the hamster '''
        self.status_of_the_hamster = 'Born'
        t = Thread(target=self._Live)
        t.daemon = True
        t.start()

    def _Live(self):
        while self.status_of_the_hamster != 'Died':
            self.sleep()
            self.doSomething()
            continue

    def sleep(self):
        ''' 
        The hamster sleeps randomly 1, 2 or 3 seconds.
        The method then calls __sleep_internal to make it
        sleep
        '''
        r = random.randint(1,3)
        self.__sleep_internal(r)

    def __sleep_internal(self, howManySecondsToSleep):
        time.sleep(howManySecondsToSleep)

    def doSomething(self):
        if self.stomach <= 1:
            self.eat()
        else:
            c = random.randint(1,3)
            self.a[c]()

    def eat(self):
        if food:
            mutex.acquire()
            food.pop()
            mutex.release()
            self.stomach += 1
        else:
            self.stomach -= 1
            if self.stomach <= 0:
                self.status_of_the_hamster = 'Died'
                print 'Hamster died, bad human'

    def run(self):
        ''' 
        The hamster runs 
        '''
        self.stomach -= 1

    def climb(self):
        '''
        The hamster climbs
        '''
        self.stomach -= 1
 
if __name__ == '__main__':
    food  = [1,1,1,1]
    h = Hamster(food)
    h.born()
    while 1:
        print "Press:\n 1 to put food\n 2 to remove food\n 3 to print general status_of_the_hamster\n 4 to exit"
        try:
            a = int(raw_input('> '))
            if a not in [1,2,3,4]:
                raise Exception('Not a valid choice')
        except:
            print 'Not a valid input'
            continue
        if a == 1:
            mutex.acquire()
            food.append(1)
            mutex.release()
        if a == 2:
            if food:
                mutex.acquire()
                food.pop()
                mutex.release()
            else:
                print "Can't remove food"
        if a == 3:
            print "Hamster is: {}, hamster stomach: {}, food availability: {}".format(h.status_of_the_hamster, h.stomach, len(food))
        if a == 4:
            break
